// Generated by CoffeeScript 1.9.2
(function() {
  var Group, Recorder,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  paper.setup(document.getElementById('myCanvas'));

  Group = paper.Group;

  Recorder = (function() {
    function Recorder(history, group) {
      this.history = history != null ? history : [];
      this.group = group ? group : new Group({
        name: 'default'
      });
      this.registered = {};
      this.playing = [];
    }

    Recorder.prototype.getProperty = function(obj, prop) {
      var attr, i, len, ref;
      ref = prop.split('.');
      for (i = 0, len = ref.length; i < len; i++) {
        attr = ref[i];
        obj = obj[attr];
      }
      return obj;
    };

    Recorder.prototype.add = function() {
      var Cls, extra, item, options, p_obj;
      item = arguments[0], options = arguments[1], extra = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      if (typeof item === 'string') {
        Cls = this.getProperty(paper, item);
        p_obj = (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Cls, [options].concat(slice.call(extra)), function(){});
        this.history.push({
          type: 'add',
          item: item,
          options: options,
          extra: extra,
          time: Date.now()
        });
        this.group.addChild(p_obj);
        return p_obj;
      } else {
        throw "item must be the name of a paper object";
      }
    };

    Recorder.prototype.update = function(name, method, options) {
      var obj, tmp;
      if (typeof name === 'string') {
        obj = this.group.children[name];
      } else {
        name;
      }
      if (!obj) {
        throw "paper object not found, wrong name: " + name + "?";
      }
      tmp = obj[method](options);
      this.history.push({
        type: 'update',
        method: method,
        name: obj.name,
        options: options,
        time: Date.now()
      });
      return tmp;
    };

    Recorder.prototype.removeAll = function() {
      return this.group.removeChildren();
    };

    Recorder.prototype.playEntry = function(entry) {
      switch (entry.type) {
        case "add":
          if (entry.extra) {
            return this.add.apply(this, [entry.item, entry.options].concat(slice.call(entry.extra)));
          } else {
            return this.add(entry.item, entry.options);
          }
          break;
        case "update":
          return this.update(entry.name, entry.method, entry.options);
        case "clearStream":
          return this.clearStream(entry.name);
        case "removeAll":
          return this.removeAll();
        case "pathToData":
          return this.pathToData(entry.name, entry.data);
        case "addStream":
          return this.addStream(entry.name, entry.options);
      }
    };

    Recorder.prototype.addStream = function(disc, opts) {
      var callback, crnt_ii, f, length, meta, name, offsetTime;
      if (typeof disc === 'string') {
        name = disc;
        disc = this.registered[name];
        console.log(disc);
      }
      if (disc[0].type === 'metadata') {
        meta = disc.splice(0, 1)[0];
        console.log(meta);
        name = meta.name || '';
      } else {
        name = '';
      }
      if (!(opts != null ? opts.relStart : void 0)) {
        offsetTime = performance.now() - disc[0]['time'];
      } else {
        offsetTime = performance.now() - opts.relStart;
      }
      if (opts != null ? opts.callback : void 0) {
        callback = opts.callback;
      }
      crnt_ii = 0;
      length = disc.length;
      f = (function(_this) {
        return function(crntTime) {
          var remaining;
          while (disc[crnt_ii] && disc[crnt_ii].time + offsetTime < crntTime) {
            _this.playEntry(disc[crnt_ii]);
            crnt_ii++;
          }
          remaining = length - crnt_ii;
          if (!remaining) {
            if (typeof callback === "function") {
              callback();
            }
          }
          return remaining;
        };
      })(this);
      this.playing.push([name, f]);
      return f;
    };

    Recorder.prototype.clearStream = function(name) {
      var i, ii, len, ref, ref1, stream;
      if (name == null) {
        this.playing = [];
      } else {
        if (!Array.isArray(name)) {
          name = [name];
        }
        ref = this.playing;
        for (ii = i = 0, len = ref.length; i < len; ii = ++i) {
          stream = ref[ii];
          if (ref1 = stream[0], indexOf.call(name, ref1) >= 0) {
            this.playing.splice(ii, 1);
          }
        }
      }
      return this.playing.length;
    };

    Recorder.prototype.runStream = function(crntTime) {
      var i, ii, out, ref, stream;
      ref = this.playing;
      for (ii = i = ref.length - 1; i >= 0; ii = i += -1) {
        stream = ref[ii];
        out = stream ? stream[1](crntTime) : void 0;
        if (!out) {
          this.playing.splice(ii, 1);
        }
      }
      return ii;
    };

    Recorder.prototype.register = function(name, stream) {
      if (typeof name === 'object') {
        return this.registered = name;
      } else {
        return this.registered[name] = stream;
      }
    };

    return Recorder;

  })();

  window.Recorder = Recorder;

}).call(this);
