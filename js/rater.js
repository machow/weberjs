// Generated by CoffeeScript 1.9.2
(function() {
  var ImageRater;

  ImageRater = (function() {
    function ImageRater() {
      null;
    }

    ImageRater.prototype.mean = function(M) {
      var arr, means;
      return means = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = M.length; i < len; i++) {
          arr = M[i];
          results.push((arr.reduce(function(t, s) {
            return t + s;
          })) / arr.length);
        }
        return results;
      })();
    };

    ImageRater.prototype.scale = function(M) {
      var s;
      s = Math.sqrt(numeric.norm2(M) / (M[0].length * 2));
      return {
        scaled: numeric.div(M, s),
        s: s
      };
    };

    ImageRater.prototype.rotateAlign = function(src, ref) {
      var N, den, i, ii, num, ref1, theta, w, x, y, z;
      N = src[0].length - 1;
      x = src[0], y = src[1];
      w = ref[0], z = ref[1];
      num = den = 0;
      for (ii = i = 0, ref1 = N; i <= ref1; ii = i += 1) {
        num += w[ii] * y[ii] - z[ii] * x[ii];
        den += w[ii] * x[ii] + z[ii] * y[ii];
      }
      theta = Math.atan(num / den);
      return theta;
    };

    ImageRater.prototype.procrustes = function(src, ref, nIters) {
      var N, add, cycle, den, dtheta, final, i, ii, j, mul, num, ref1, ref2, ref3, ref4, ref5, refMean, refS, refWide, rotMat, srcMean, srcS, srcT, theta, tree, w, x, y, z;
      if (true) {
        src = src.slice();
        ref = ref.slice();
      }
      refMean = this.mean(ref);
      srcMean = this.mean(src);
      src = [numeric.sub(src[0], srcMean[0]), numeric.sub(src[1], srcMean[1])];
      ref = [numeric.sub(ref[0], refMean[0]), numeric.sub(ref[1], refMean[1])];
      ref1 = this.scale(src), src = ref1.scaled, srcS = ref1.s;
      ref2 = this.scale(ref), ref = ref2.scaled, refS = ref2.s;
      srcT = numeric.transpose(src);
      refWide = numeric.transpose(ref);
      tree = createKDTree(refWide);
      N = src[0].length - 1;
      theta = 0;
      for (cycle = i = 0, ref3 = nIters; i <= ref3; cycle = i += 1) {
        num = den = 0;
        for (ii = j = 0, ref4 = N; j <= ref4; ii = j += 1) {
          x = src[0][ii];
          y = src[1][ii];
          ref5 = refWide[tree.nn([x, y])], w = ref5[0], z = ref5[1];
          num += x * z - y * w;
          den += x * w + y * z;
        }
        dtheta = Math.atan(num / den);
        rotMat = [[Math.cos(dtheta), -Math.sin(dtheta)], [Math.sin(dtheta), Math.cos(dtheta)]];
        src = numeric.dot(rotMat, src);
        theta += dtheta;
        console.log(cycle);
      }
      add = numeric.add;
      mul = numeric.mul;
      final = [add(mul(src[0], refS), refMean[0]), add(mul(src[1], refS), refMean[1])];
      return {
        mean: refMean,
        scale: refS,
        rot: rotMat,
        src: src,
        final: final
      };
    };

    ImageRater.prototype.longToWide = function(arr) {
      var i, ii, ref1, results;
      results = [];
      for (ii = i = 0, ref1 = arr[0].length; i <= ref1; ii = i += 1) {
        results.push([arr[0][ii], arr[1][ii]]);
      }
      return results;
    };

    return ImageRater;

  })();

  window.ImageRater = ImageRater;

}).call(this);
